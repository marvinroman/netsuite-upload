{
    "defineCustomModule": {
        "prefix": "defineModule",
        "description": "Define custom SuiteScript AMD module",
        "body": [
            "/**",
            " *@NApiVersion 2.0",
            " */",
            "define([], function() {",
            "",
            "	return {",
            "		$0",
            "	}",
            "});",
            ""
        ]
    },
    "requireCustomModule": {
        "prefix": "requireModule",
        "description": "Require custom SuiteScript AMD module",
        "body": [
            "/**",
            " *@NApiVersion 2.0",
            " */",
            "require([], function() {",
            "",
            "	$0",
            "",
            "});",
            ""
        ]
    },
    "defineRestlet": {
        "prefix": "defineRestlet",
        "description": "Define Restlet script module",
        "body": [
            "/**",
            " *@NApiVersion 2.0",
            " *@NScriptType Restlet",
            " */",
            "define([], function() {",
            "",
            "	function _get(context) {",
            "		$0",
            "	}",
            "",
            "	function _post(context) {",
            "		",
            "	}",
            "",
            "	function _put(context) {",
            "		",
            "	}",
            "",
            "	function _delete(context) {",
            "		",
            "	}",
            "",
            "	return {",
            "		get: _get,",
            "		post: _post,",
            "		put: _put,",
            "		delete: _delete",
            "	}",
            "});",
            ""
        ]
    },
    "defineUserEvent": {
        "prefix": "defineUserEvent",
        "description": "Define User Event script module",
        "body": [
            "/**",
            " * @NApiVersion 2.0",
            " * @NScriptType UserEventScript",
            " * @NModuleScope SameAccount",
            " */",
            "define([], function() {",
            "",
            "  /**",
            "   * Function definition to be triggered before record is loaded.",
            "   *",
            "   * @method beforeLoad",
            "   *",
            "   * @param {Object} context",
            "   * @param {Record} context.newRecord - New record",
            "   * @param {string} context.type - Trigger type",
            "   * @param {Form} context.form - Current form",
            "   *",
            "   * @return {void}",
            "   *",
            "   */",
            "	function beforeLoad(context) {",
            "		$0",
            "	}",
            "",
            "  /**",
            "   * Function definition to be triggered before record is loaded.",
            "   *",
            "   * @method beforeSubmit",
            "   *",
            "   * @param {Object} context",
            "   * @param {Record} context.newRecord - New record",
            "   * @param {string} context.type - Trigger type",
            "   *",
            "   * @return {void}",
            "   *",
            "   */",
            "	function beforeSubmit(context) {",
            "		",
            "	}",
            "",
            "  /**",
            "   * Function definition to be triggered before record is loaded.",
            "   *",
            "   * @method afterSubmit",
            "   *",
            "   * @param {Object} context",
            "   * @param {Record} context.newRecord - New record",
            "   * @param {string} context.type - Trigger type",
            "   *",
            "   * @return {void}",
            "   *",
            "   */",
            "	function afterSubmit(context) {",
            "		",
            "	}",
            "",
            "	return {",
            "		beforeLoad: beforeLoad,",
            "		beforeSubmit: beforeSubmit,",
            "		afterSubmit: afterSubmit",
            "	}",
            "});",
            ""
        ]
    },
    "defineClient": {
        "prefix": "defineClient",
        "description": "Define Client script module",
        "body": [
            "/**",
            " * @NApiVersion 2.0",
            " * @NScriptType ClientScript",
            " * @NModuleScope SameAccount",
            " */",
            "define([], function() {",
            "",
            "  /**",
            "   * Function to be executed after page is initialized.",
            "   *",
            "   * @method pageInit",
            "   *",
            "   * @param {Object} context",
            "   * @param {Record} context.currentRecord - Current form record",
            "   * @param {string} context.mode - The mode in which the record is being accessed (create, copy, or edit)",
            "   *",
            "   * @return {void}",
            "   *",
            "   */",
            "	function pageInit(context) {",
            "		$0",
            "	}",
            "",
            "  /**",
            "   * Validation function to be executed when record is saved.",
            "   *",
            "   * @method saveRecord",
            "   *",
            "   * @param {Object} context",
            "   * @param {Record} context.currentRecord - Current form record",
            "   *",
            "   * @return {boolean}  Return true if record is valid",
            "   *",
            "   */",
            "	function saveRecord(context) {",
            "		",
            "	}",
            "",
            "  /**",
            "   * Validation function to be executed when field is changed.",
            "   *",
            "   * @method validateField",
            "   *",
            "   * @param {Object} context",
            "   * @param {Record} context.currentRecord - Current form record",
            "   * @param {string} context.sublistId - Sublist name",
            "   * @param {string} context.fieldId - Field name",
            "   * @param {number} context.lineNum - Line number. Will be undefined if not a sublist or matrix field",
            "   * @param {number} context.columnNum - Line number. Will be undefined if not a matrix field",
            "   *",
            "   * @return {boolean}  Return true if record is valid",
            "   *",
            "   */",
            "	function validateField(context) {",
            "		",
            "	}",
            "",
            "  /**",
            "   * Function to be executed when field is changed.",
            "   *",
            "   * @method fieldChanged",
            "   *",
            "   * @param {Object} context",
            "   * @param {Record} context.currentRecord - Current form record",
            "   * @param {string} context.sublistId - Sublist name",
            "   * @param {string} context.fieldId - Field name",
            "   * @param {number} context.lineNum - Line number. Will be undefined if not a sublist or matrix field",
            "   * @param {number} context.columnNum - Line number. Will be undefined if not a matrix field",
            "   *",
            "   * @return {void}",
            "   *",
            "   */",
            "	function fieldChanged(context) {",
            "		",
            "	}",
            "",
            "  /**",
            "   * Function to be executed when field is slaved.",
            "   *",
            "   * @method postSourcing",
            "   *",
            "   * @param {Object} context",
            "   * @param {Record} context.currentRecord - Current form record",
            "   * @param {string} context.sublistId - Sublist name",
            "   * @param {string} context.fieldId - Field name",
            "   *",
            "   * @return {void}",
            "   *",
            "   */",
            "	function postSourcing(context) {",
            "		",
            "	}",
            "",
            "  /**",
            "   * Function to be executed after line is selected.",
            "   *",
            "   * @method lineInit",
            "   *",
            "   * @param {Object} context",
            "   * @param {Record} context.currentRecord - Current form record",
            "   * @param {string} context.sublistId - Sublist name",
            "   *",
            "   * @return {void}",
            "   *",
            "   */",
            "	function lineInit(context) {",
            "		",
            "	}",
            "",
            "  /**",
            "   * Validation function to be executed when record is deleted.",
            "   *",
            "   * @method validateDelete",
            "   *",
            "   * @param {Object} context",
            "   * @param {Record} context.currentRecord - Current form record",
            "   * @param {string} context.sublistId - Sublist name",
            "   *",
            "   * @return {boolean} Return true if sublist line is valid",
            "   *",
            "   */",
            "	function validateDelete(context) {",
            "		",
            "	}",
            "",
            "  /**",
            "   * Validation function to be executed when sublist line is inserted.",
            "   *",
            "   * @method validateInsert",
            "   *",
            "   * @param {Object} context",
            "   * @param {Record} context.currentRecord - Current form record",
            "   * @param {string} context.sublistId - Sublist name",
            "   *",
            "   * @return {boolean} Return true if sublist line is valid",
            "   *",
            "   */",
            "	function validateInsert(context) {",
            "		",
            "	}",
            "",
            "  /**",
            "   * Validation function to be executed when sublist line is committed.",
            "   *",
            "   * @method validateLine",
            "   *",
            "   * @param {Object} context",
            "   * @param {Record} context.currentRecord - Current form record",
            "   * @param {string} context.sublistId - Sublist name",
            "   *",
            "   * @return {boolean} Return true if sublist line is valid",
            "   *",
            "   */",
            "	function validateLine(context) {",
            "		",
            "	}",
            "",
            "  /**",
            "   * Function to be executed after sublist is inserted, removed, or edited.",
            "   *",
            "   * @method sublistChanged",
            "   *",
            "   * @param {Object} context",
            "   * @param {Record} context.currentRecord - Current form record",
            "   * @param {string} context.sublistId - Sublist name",
            "   *",
            "   * @return {void}",
            "   *",
            "   */",
            "	function sublistChanged(context) {",
            "		",
            "	}",
            "",
            "	return {",
            "		pageInit: pageInit,",
            "		saveRecord: saveRecord,",
            "		validateField: validateField,",
            "		fieldChanged: fieldChanged,",
            "		postSourcing: postSourcing,",
            "		lineInit: lineInit,",
            "		validateDelete: validateDelete,",
            "		validateInsert: validateInsert,",
            "		validateLine: validateLine,",
            "		sublistChanged: sublistChanged",
            "	}",
            "});",
            ""
        ]
    },
    "defineMapReduce": {
        "prefix": "defineMapReduce",
        "description": "Define Map/Reduce script module",
        "body": [
            "/**",
            " *@NApiVersion 2.0",
            " *@NScriptType MapReduceScript",
            " */",
            "define([], function() {",
            "",
            "	function getInputData() {",
            "		$0",
            "	}",
            "",
            "	function map(context) {",
            "		",
            "	}",
            "",
            "	function reduce(context) {",
            "		",
            "	}",
            "",
            "	function summarize(summary) {",
            "		",
            "	}",
            "",
            "	return {",
            "		getInputData: getInputData,",
            "		map: map,",
            "		reduce: reduce,",
            "		summarize: summarize",
            "	}",
            "});",
            ""
        ]
    },
    "defineScheduled": {
        "prefix": "defineScheduled",
        "description": "Define Scheduled script module",
        "body": [
            "/**",
            " * @NApiVersion 2.0",
            " * @NScriptType ScheduledScript",
            " * @NModuleScope SameAccount",
            " */",
            "define([], function() {",
            "",
            "  /**",
            "   * Definition of the Scheduled script trigger point.",
            "   *",
            "   * @method execute",
            "   *",
            "   * @param {Object} context",
            "   * @param {string} context.type - The context in which the script is executed. It is one of the values from the context.InvocationType enum.",
            "   *",
            "   * @return {void}",
            "   *",
            "   */",
            "	function execute(context) {",
            "		$0",
            "	}",
            "",
            "	return {",
            "		execute: execute",
            "	}",
            "});",
            ""
        ]
    },
    "defineSuitelet": {
        "prefix": "defineSuitelet",
        "description": "Define Suitelet script module",
        "body": [
            "/**",
            " *@NApiVersion 2.0",
            " *@NScriptType Suitelet",
            " */",
            "define([], function() {",
            "",
            "	function onRequest(context) {",
            "		$0",
            "	}",
            "",
            "	return {",
            "		onRequest: onRequest",
            "	}",
            "});",
            ""
        ]
    },
    "defineWorkflowAction": {
        "prefix": "defineWorkflowAction",
        "description": "Define Workflow Action script module",
        "body": [
            "/**",
            " *@NApiVersion 2.0",
            " *@NScriptType WorkflowActionScript",
            " */",
            "define([], function() {",
            "",
            "	function onAction(context) {",
            "		$0",
            "	}",
            "",
            "	return {",
            "		onAction: onAction",
            "	}",
            "});",
            ""
        ]
    },
    "definePortlet": {
        "prefix": "definePortlet",
        "description": "Define Portlet script module",
        "body": [
            "/**",
            " *@NApiVersion 2.0",
            " *@NScriptType Portlet",
            " */",
            "define([], function() {",
            "",
            "	function render(params) {",
            "		$0",
            "	}",
            "",
            "	return {",
            "		render: render",
            "	}",
            "});",
            ""
        ]
    },
    "defineMassUpdate": {
        "prefix": "defineMassUpdate",
        "description": "Define Mass Update script module",
        "body": [
            "/**",
            " * @NApiVersion 2.0",
            " * @NScriptType MassUpdateScript",
            " * @NModuleScope SameAccount",
            " */",
            "define([], function() {",
            "",
            "  /**",
            "   * Definition of Mass Update trigger point.",
            "   *",
            "   * @method each",
            "   *",
            "   * @param {Object} params",
            "   * @param {string} params.type - Record type of the record being processed by the mass update",
            "   * @param {number} params.id - ID of the record being processed by the mass update",
            "   *",
            "   * @return {void}",
            "   *",
            "   */",
            "	function each(params) {",
            "		$0",
            "	}",
            "",
            "	return {",
            "		each: each",
            "	}",
            "});",
            ""
        ]
    },
    "defineBundleInstall": {
        "prefix": "defineBundleInstall",
        "description": "Define Bundle Installation script module",
        "body": [
            "/**",
            " * @NApiVersion 2.0",
            " * @NScriptType BundleInstallationScript",
            " * @NModuleScope SameAccount",
            " */",
            "define([], function() {",
            "",
            "	function checkPrerequisites() {",
            "		$0if (!runtime.isFeatureInEffect({ feature: 'TIMEOFFMANAGEMENT' }))",
            "			throw 'The TIMEOFFMANAGEMENT feature must be enabled. Please enable the feature and try again.';",
            "	}",
            "",
            "	return {",
            "		beforeInstall: function beforeInstall(params) {",
            "			checkPrerequisites();",
            "		},",
            "		beforeUpdate: function beforeUpdate(params) {",
            "			checkPrerequisites();",
            "		}",
            "	}",
            "});",
            ""
        ]
    }
}